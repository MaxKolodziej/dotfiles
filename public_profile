#!/usr/bin/env zsh

alias be="bundle exec"
alias bi="bundle install"

alias mkdir='mkdir -p'
alias ls='ls -lah'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias gut='git'
alias gc="git commit"
alias gf="git fetch"
alias gb="git branch"
alias gd="git diff"
alias gdc="git diff --cached"
alias ga="git add"
alias gA="git add -A"
alias gpb="git pivotal-branch"
alias gpr="git pull-request"
alias gm="git merge"
alias gsh="git push --follow-tags"
alias gtags='git for-each-ref --sort="-*authordate" --format="%(tag) - %(taggerdate:short)%0a%(contents)" refs/tags | less'
alias gll="git pull"
function glc {
  command=$(git show --name-only --oneline HEAD | awk '{print $1}' | cat -n)
  echo $command
  result=$command
  if [[ -z $1 ]]
  then
    echo 'Put line number'
  else
    number=$1
    line=$(echo $result | awk "\$1 ~ /^$number/" | head -1 | awk '{print $2}' | tr -d " \r\n\t")
    echo $line | tr -d " \r\n\t"
    echo ""
    echo $line | tr -d " \r\n\t" | clip_copy
  fi
}
alias gca="git commit --amend"
alias got="git checkout --theirs ."
alias goo="git checkout --ours ."
alias stash="git stash -u"
alias grm="git rebase master"
alias grc="git rebase --continue"
alias grs="git rebase --skip"
alias gcp="git cherry-pick"
alias gcpc="git cherry-pick --continue"
alias gml="git merge -"
alias gom="git checkout master"
alias gdm="git diff --name-only master"
alias gsl="git stash list"
# commit name from branch
function gcname {
   name=$(git rev-parse --abbrev-ref HEAD | sed "s/\//: /g" | sed "s/-/ /g" | sed "s/XCON /XCON-/g")
   echo $name
   echo $name | clip_copy
}
alias rcop="bundle exec rubocop . -DR"
alias ccop="coffeelint -f .coffeelint.json ./**/*.coffee"
alias slow_postgres_queries="grep 'duration: [0-9]\{3,6\}' | sort -k 6,6 -n | tail -n 20"
alias jfc="RAILS_ENV=test SKIP_COVERAGE=true bundle exec rake javascript_fixtures:create"
alias seed="bundle exec rake db:seed"
alias merged="git log --grep=Merge"
alias nuget="mono /usr/local/bin/nuget.exe"
alias rel_locale="bundle exec rails react_on_rails:locale"

alias d_e="docker exec -it"
alias d_p="docker ps"
alias d_i="docker images"
alias d_irm="docker rmi"
alias d_c="docker container list -a"
alias d_crm="docker container rm"
alias d_cp="docker-compose ps"
alias d_cd="docker-compose down"
alias d_cu="docker-compose up -d"
function d_up {
  if [[ $@ != *"-d"* ]];then
    echo "You forgot to deamonize?"
    sleep 1
  fi
  if [ -f docker-compose.max.yml ] ; then
    docker-compose -f docker-compose.max.yml up $@
  else
    docker-compose -f docker-compose.yml up $@
  fi
}
function d_stop {
  if [ -f docker-compose.max.yml ] ; then
    docker-compose -f docker-compose.max.yml stop $@
  else
    docker-compose -f docker-compose.yml stop $@
  fi
}

function dl {
  alias | grep -i ^d_
  declare +f | gr ^d_
}
function kl {
  alias | grep -i ^k_
  declare +f | gr ^k_
}

alias rem_lines="sed -e '2,6d'"

alias fix_bundler="rm .bundle/config; bundle install --system"

alias phll="rake phraseapp:pull"
alias phsh="rake phraseapp:push"
alias decaf="decaffeinate --allow-invalid-constructors"
alias ecop='node_modules/.bin/eslint app/assets/javascripts --ext .es6'
alias retest="@github-script retest this please!"
alias play="osascript ~/.vim/play_song_in_itunes.applescript play"

function srspec {
  for i in $(find . -name '*_spec.rb'); do rspec $i; done
}

function gsa {
  git stash apply stash@{$1}
}
function gr {
  grep -i "$@"
}
function gl {
  git log --oneline
}
function go {
  git checkout "$@"; update_current_git_vars
}
function gor {
  git checkout -t $(git branch -r | grep -i "$@" | tail -1); update_current_git_vars
}
function grh {
  git fetch; git reset --hard origin/$(git rev-parse --abbrev-ref HEAD); update_current_git_vars
}
function gol {
  git checkout -; update_current_git_vars
}
function gf {
  git fetch
}
function ltp {
  tail -n 200 -f log/test.log | grep 'Processing\|Parameters'
}
function psg {
  ps aux | grep -i $1
}

function ff {
  find . -name $1
}

alias mongo="mongod --dbpath=/Users/max/workspace/mongodb"
alias es="elasticsearch --config=/usr/local/opt/elasticsearch/config/elasticsearch.yml"
alias tun="sudo tunnels 127.0.0.1:443 127.0.0.1:80"
alias rab="rabbitmq-server"
alias ttr="touch tmp/restart.txt"

alias unstash="git stash pop"
alias cuc='bundle exec cucumber'

alias nginx_logs=/usr/local/Cellar/nginx/1.4.4/logs

function os {
  case "$(uname -s)" in

   Darwin)
     echo 'OSX'
     ;;

   Linux)
     echo 'Linux'
     ;;

   CYGWIN*|MINGW32*|MSYS*|MINGW*)
     echo 'MS Windows'
     ;;

   *)
     echo 'Other OS'
     ;;
 esac
}

function clip_copy {
  read text
  myos=$(os)
  if [[ $myos == "Linux" ]]
  then
    echo $text | tr -d '[:cntrl:]' | xclip -selection clipboard # tr will remove colors and new lines ^M
  else
    echo $text | tr -d '[:cntrl:]' | pbcopy
  fi
}

alias pb2haml='pbpaste | html2haml | pbcopy'

alias docker_es='docker exec -it $(docker-compose ps -q elasticsearch) /bin/bash'
alias docker_worker='docker exec -it $(docker-compose ps -q worker) /bin/bash'
alias docker_rabbit='docker exec -it $(docker-compose ps -q rabbitmq) /bin/bash'
alias docker_redis='docker exec -it $(docker-compose ps -q redis) /bin/bash'

function rmd {
  rake db:migrate:down VERSION=$1
}

function rmu {
  rake db:migrate:up VERSION=$1
}

function rollback {
  rake db:rollback STEP=$1
  RAILS_ENV=test rake db:rollback STEP=$1
}

function migrate {
  rake db:migrate
  RAILS_ENV=test rake db:migrate
}

function db_test {
  RAILS_ENV=test bundle exec rake db:drop
  RAILS_ENV=test bundle exec rake db:create db:schema:load
}

function db_dev {
  bundle exec rake db:drop
  bundle exec rake db:create db:schema:load
}

function gpu {
  echo "You're going to execute: git push -u origin $(git rev-parse --abbrev-ref HEAD)"
  sleep 1
  git push -u origin $(git rev-parse --abbrev-ref HEAD)
}

function res_spawner {
  job_runs=$(ps aux | grep -i "delayed_job" | grep -v grep | wc -l)
  if [[ $job_runs -eq 0 ]]
  then
    cd /virtual/app/current && RAILS_ENV=production bin/delayed_job restart
  fi
}

# run last command
function k {
  command=$(history | grep -v " k$" | tail -1 | awk '{print $2,$3,$4,$5}')
  echo "executing: $command"
  eval $command
}

function cb {
  branch_name=$(ruby ~/dotfiles/create_name_for_branch.rb $1 $2)
  echo $branch_name
  echo $branch_name | tr -d "\n" | clip_copy
}

function cl {
  python ~/dotfiles/copy_line.py
}

function cf {
  python ~/dotfiles/copy_line.py
  echo $# | cut -d ':' -f1 | clip_copy
}

function rts {
  bundle exec rails routes | grep -i "$1"
}

function gg {
  git grep -i -n $@ | cat -n | cut -c -180
}

function ggf {
  echo $1
  echo $2
  git grep -i --files-with-matches $1 | xargs cat | grep -v $2
}

function spp {
  source ~/.public_profile
}

function ggc {
  command=$(history | grep " gg " | tail -1 | awk '{print $2,$3,$4,$5,$6,$7,$8,$9}')
  result=$(eval "$command")
  if [[ -z $1 ]]
  then
    echo 'Put line number'
  else
    number=$1
    line=$(echo $result | awk "\$1 ~ /^$number/" | head -1 | awk '{print $2}' | cut -d ':' -f1-2 | tr -d " \r\n\t")
    echo $line | tr -d " \r\n\t"
    echo ""
    echo $line | tr -d " \r\n\t" | clip_copy
  fi
}

function vg {
  if [[ -z $1 ]]
  then
    command=$(history | grep -v " k$" | grep -v "vg$" | tail -1 | awk '{print $2,$3,$4,$5}')
    result=$(eval "$command")
  else
    result=$(git grep -i -n "$@" | tail -n 30)
  fi

  echo $result | cat -n
  echo 'File: '
  read user_command

  action=$(echo $user_command | cut -c1)

  if [[ $action == 'c' ]]
  then
    user_command=$(echo $user_command | cut -c2-)
  else
    action='e'
  fi

  line=$(echo $result | awk "NR==$user_command" |  cut -d ':' -f1-2 | tr -d " \n")

  file=$(echo $line | cut -d ':' -f1)
  line_number=$(echo $line | cut -d ':' -f2)

  echo $file | clip_copy
  if [[ $action == 'e' ]]
  then
    osascript ~/dotfiles/execute_in_macvim.applescript ":tab new $file"

    osascript ~/dotfiles/execute_in_macvim.applescript ":$line_number"
  fi
}

function gs {
  git status --porcelain | cat -n
  update_current_git_vars #for zsh git prompt
}

function gsc {
  command=$(history | grep " gs$" | tail -1 | awk '{print $2,$3,$4,$5}')
  result=$(eval "$command")
  if [[ -z $1 ]]
  then
    echo 'Put line number'
  else
    line=$(echo $result | awk "NR==$1" | awk '{print $3}' | tr -d " \r\n\t")
    echo $line | tr -d '\n'
    echo ""
    echo $line | tr -d '\n' | clip_copy
  fi
}

function gso {
  command=$(history | grep "gs$" | tail -1 | awk '{print $2,$3,$4,$5}')
  result=$(eval "$command")

  file=$(echo $result | awk "NR==$1" | awk '{print $3}')

  osascript ~/dotfiles/execute_in_macvim.applescript ":tab new $file"
}

# replace_all '*.sass' . "\+transition-timing-function\((.*)\)$" "transition-timing-function: \1"
# replace_all '*.rb' . '{:order =>\(.*\)}' '-> { order(\1) }'
function replace_all {
  files=$(find $2 -name $1  | xargs grep -isl "$3")
  echo "found files:"
  echo $files
  echo $files | xargs sed -i -E -e "s/$3/$4/g"
}
function undo_replace_all {
  find . -name "*-E" | sed 's/-E//g' | while read line ; do cp "$line-E" "$line"; done
}

function gst {
  git status --porcelain | cat -n
  echo 'File: '
  read user_command
  action=$(echo $user_command | cut -c1)

  if [[ $action == 'c' ]]
  then
    user_command=$(echo $user_command | cut -c2-)
  elif [[ $action == 'd' ]]
  then
    user_command=$(echo $user_command | cut -c2-)
  else
    action='e'
    #user command stays the same
  fi

  file=$(git status --porcelain | awk "NR==$user_command" | sed 's/ *$//' | sed 's/^ *//' | cut -d ' ' -f2 | tr -d "# \n\t\r")
  echo $file
  echo $file | clip_copy
  if [[ $action == 'e' ]]
  then
    osascript ~/dotfiles/execute_in_macvim.applescript ":tab new $file"
  elif [[ $action == 'd' ]]
  then
    git diff $file
  fi
}

function gd {
  git diff $1
}

function kill1 {
  pid=$(ps aux | grep -i "$1" | grep -v 'grep' | awk '{print $2}' | sort | awk 'NR==1')
  echo "Trying to kill $pid"
  kill -9 $pid
}

function rt {
  script /tmp/last_tests.txt -c "RAILS_ENV=test bundle exec rspec $@"
}

function rtc {
  failed_tests=$(cat /tmp/last_tests.txt | awk -n '/^Failed examples:/{flag=1;next}/Randomized/{flag=0}flag' | awk -v fs="(spec |#)" '{print $2}' | grep -i spec)
  echo $failed_tests | cat -n
  echo 'Which test: '
  read number
  echo 'Copied path:'
  echo $failed_tests | awk "NR==$number"
  echo $failed_tests | awk "NR==$number" | ansifilter | clip_copy # ansifilter will remove all formatting like colors, etc
}

alias gdstat="git diff --stat develop..HEAD"

alias summer="bundle exec spring stop"

function vdt {
  git difftool -t vimdiff -y $@
}

function gor {
  if [[ $1 =~ ".+" ]]
  then
    branches=$(gbr | grep $1 -c)
    if [[ $branches == 0 ]]
    then
      echo "No branches found"
    elif [[ $branches > 1 ]]
    then
      echo "Choose more specific branch"
      gbr | grep $1
    else
      branch=$(gbr | grep $1 | awk '{print $1}')
      git checkout $branch
    fi
  fi
}

function gbso {
  git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | head -n 30
}

function csleep {
  while :; do sleep 28; echo -n ' ' >&2; done &
}

function gon {
  gbso | head -n 30 | nl
  echo 'Which branch: '
  read branch_number
  branch_name=$(gbso | awk "NR==$branch_number" | tr -d ' ')
  git checkout $branch_name
  update_current_git_vars # remove if not using zsh-git-prompt
}

function rfix {
  filenames=$(git diff HEAD --name-only --diff-filter=ACM | grep -v db/schema.rb | gr '.rb' | tr '\n' ' ')
  command="bundle exec rubocop -A $filenames"
  echo $command
  eval $command
}

function rlfix {
  last_commit=$(git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | head -n 1)
  filenames=$(git diff-tree --no-commit-id --name-only -r $last_commit | grep -v db/schema.rb | tr '\n' ' ')
  command="bundle exec rubocop -a $filenames"
  echo $command
  eval $command
}

function ip6 {
  echo "684D:1111:222:3333:4444:5555:6:77" | clip_copy
}

function cn {
 curl $1 | cat -n | awk 'NR == n - 1 || NR == n || NR == n + 1' n=$2
}

export EDITOR=vim

rc () {
  bundle exec rails c $@
}

rg () {
  bundle exec rails g $@
}

rs () {
  bundle exec rails s $@
}

alias ych="yarn run check"

ys () {
  yarn run start $1
}
yt () {
  yarn run test $@
}

alias ytr="yarn run fetch-translations"
alias yc="yarn cache clean"
alias yi="yarn install"
alias yb="NODE_ENV=development yarn run build"
alias yfix="curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 0.24.6"

sshs() {
        ssh $@ "cat > /tmp/.bashrc_temp" < ~/.bashrc_remote
        ssh -t $@ "bash --rcfile /tmp/.bashrc_temp ; rm /tmp/.bashrc_temp"
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

export PATH=$PATH:~/android/android-sdk/sdk/tools
export PATH=$PATH:/usr/local/mysql/bin
export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH

export RBENV_ROOT="$HOME/.rbenv"
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

alias show-changelog="git log --oneline --no-merges $(git describe --tags $(git rev-list --tags --max-count=1))..HEAD"

alias fixdbtest="RAILS_ENV=test bundle exec rake db:drop db:create db:migrate"
alias fixdbdev="RAILS_ENV=development bundle exec rake db:drop db:create db:migrate"
alias vimup="let i=1 | g/,\d\+)/s//\=','.i.')'/ | let i=i+1"
alias scalafmt="sbt scalafmt"

myos=$(os)
if [[ $myos == "OSX" ]]
  then
    export PATH="$(brew --prefix qt)/bin:$PATH"
  fi
alias db_fix="RAILS_ENV=test rake db:drop:primary db:drop:secondary db:create:primary db:create:secondary db:migrate:primary db:migrate:secondary"
alias fs="foreman start"

alias nt="DEBUG_PRINT_LIMIT=30000 npm test"
alias ntu="DEBUG_PRINT_LIMIT=30000 npm test -- -u"
alias ne="npm run lint"
function nef() {
  if [[ -z $1 ]]
  then
    npm run eslint-fix
  else
    npm run env -- eslint --fix $1 -c .eslintrc
  fi
}

alias tags="ripper-tags -R * `bundle show --paths`"
alias roach="cockroach start-single-node --insecure --host=localhost  --logtostderr"
alias find_by_port="netstat -vanp tcp | grep 3000"

# fixssl="export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/"
# export LDFLAGS="-L/usr/local/opt/libxml2/lib"
# export CPPFLAGS="-I/usr/local/opt/libxml2/include"
# export CPPFLAGS="-I/usr/local/opt/libxml2/include/libxml2"
# export LDFLAGS="-L/usr/local/opt/libiconv/lib"
# export CPPFLAGS="-I/usr/local/opt/libiconv/include"
# export LDFLAGS="-L/usr/local/opt/imagemagick@6/lib"
# export CPPFLAGS="-I/usr/local/opt/imagemagick@6/include"
if [[ $myos == "OSX" ]]
then
  export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"
  export PATH="/usr/local/opt/libiconv/bin:$PATH"
  export PATH="/usr/local/opt/openssl/bin:$PATH"
  export PATH="/usr/local/opt/libxml2/bin:$PATH"
  export PATH="/usr/local/opt/mariadb@10.0/bin:$PATH"
  export PATH="/usr/local/opt/berkeley-db@4/bin:$PATH"
fi
#export PKG_CONFIG_PATH="/usr/local/opt/libxml2/lib/pkgconfig"
#export PKG_CONFIG_PATH="/usr/local/opt/imagemagick@6/lib/pkgconfig"
#  gem install nokogiri -v '1.4.4' --source 'https://rubygems.org/' -- --use-system-libraries --with-xml2-include=/usr/local/opt/libxml2/include/libxml2 --with-xml2-lib=/usr/local/opt/libxml2/lib
#
#
if [[ $myos == "Linux" ]]
then
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right "['<Super>l']"
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left "['<Super>h']"
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up "['<Super>k']"
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down "['<Super>j']"
  gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left "['<Super><Shift>h']"
  gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right "['<Super><Shift>l']"
  gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up "['<Super><Shift>k']"
  gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down "['<Super><Shift>j']"

  for i in $(seq 1 9); do gsettings set org.gnome.shell.extensions.dash-to-dock app-hotkey-${i} '[]'; done
  for i in $(seq 1 9); do gsettings set org.gnome.shell.keybindings switch-to-application-${i} '[]'; done

  alias swap_alt="setxkbmap -option altwin:swap_lalt_lwin"
  alias fix_copy="autocutsel -fork & autocutsel -selection PRIMARY -fork &"
fi

# xmodmap -pke to check key list - use tab as Hyper_L
# xmodmap -e "keycode 23 = Hyper_L"

# run kinto - ubuntu to macos keyboard mapper
# journalctl -f --unit=xkeysnal.service -b &
